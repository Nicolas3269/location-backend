# Generated by Django 5.1.7 on 2025-06-19 14:40

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Bailleur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Bailleur',
                'verbose_name_plural': 'Bailleurs',
            },
        ),
        migrations.CreateModel(
            name='Personne',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('prenom', models.CharField(max_length=100)),
                ('date_naissance', models.DateField(blank=True, null=True)),
                ('email', models.EmailField(max_length=254)),
                ('adresse', models.TextField()),
                ('iban', models.CharField(blank=True, max_length=34, null=True)),
            ],
            options={
                'verbose_name': 'Personne',
                'verbose_name_plural': 'Personnes',
            },
        ),
        migrations.CreateModel(
            name='Societe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('siret', models.CharField(max_length=14, unique=True)),
                ('raison_sociale', models.CharField(max_length=200)),
                ('forme_juridique', models.CharField(max_length=100)),
                ('adresse', models.TextField()),
                ('email', models.EmailField(max_length=254)),
                ('iban', models.CharField(blank=True, max_length=34, null=True)),
            ],
            options={
                'verbose_name': 'Société',
                'verbose_name_plural': 'Sociétés',
            },
        ),
        migrations.CreateModel(
            name='Bien',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adresse', models.CharField(max_length=255)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('identifiant_fiscal', models.CharField(blank=True, max_length=50, verbose_name='Identifiant fiscal')),
                ('regime_juridique', models.CharField(choices=[('monopropriete', 'Monopropriété'), ('copropriete', 'Copropriété')], default='monopropriete', max_length=20, verbose_name='Régime juridique')),
                ('type_bien', models.CharField(choices=[('appartement', 'Appartement'), ('maison', 'Maison')], max_length=20, verbose_name='Type de bien')),
                ('etage', models.CharField(blank=True, max_length=10)),
                ('porte', models.CharField(blank=True, max_length=10)),
                ('dernier_etage', models.BooleanField(default=False)),
                ('periode_construction', models.CharField(blank=True, choices=[('avant 1946', 'Avant 1946'), ('1946-1970', '1946-1970'), ('1971-1990', '1971-1990'), ('1990-2005', '1990-2005'), ('apres 1990', 'Après 1990'), ('apres 2005', 'Après 2005')], max_length=20, null=True, verbose_name='Période de construction')),
                ('superficie', models.DecimalField(decimal_places=2, help_text='En m²', max_digits=8)),
                ('meuble', models.BooleanField(default=False, verbose_name='Meublé')),
                ('classe_dpe', models.CharField(choices=[('A', 'A (≤ 70 kWh/m²/an)'), ('B', 'B (71 à 110 kWh/m²/an)'), ('C', 'C (111 à 180 kWh/m²/an)'), ('D', 'D (181 à 250 kWh/m²/an)'), ('E', 'E (251 à 330 kWh/m²/an)'), ('F', 'F (331 à 420 kWh/m²/an)'), ('G', 'G (> 420 kWh/m²/an)'), ('NA', 'Non soumis à DPE')], default='NA', max_length=2, verbose_name='Classe énergétique DPE')),
                ('depenses_energetiques', models.CharField(blank=True, default='non renseigné', max_length=400, verbose_name='Dépenses énergétiques théoriques (€/an)')),
                ('annexes', models.TextField(blank=True)),
                ('additionnal_description', models.TextField(blank=True)),
                ('annexes_privatives', models.JSONField(blank=True, default=list)),
                ('annexes_collectives', models.JSONField(blank=True, default=list)),
                ('information', models.JSONField(blank=True, default=list)),
                ('pieces_info', models.JSONField(blank=True, default=dict, help_text='Détail des pièces: chambres, sallesDeBain, cuisines, etc.')),
                ('chauffage_type', models.CharField(blank=True, choices=[('collectif', 'Collectif'), ('individuel', 'Individuel')], max_length=20, null=True)),
                ('chauffage_energie', models.CharField(blank=True, max_length=50)),
                ('eau_chaude_type', models.CharField(blank=True, choices=[('collectif', 'Collectif'), ('individuel', 'Individuel')], max_length=20, null=True)),
                ('eau_chaude_energie', models.CharField(blank=True, max_length=50)),
                ('bailleurs', models.ManyToManyField(help_text='Un ou plusieurs bailleurs pour ce bien', related_name='biens', to='bail.bailleur')),
            ],
        ),
        migrations.CreateModel(
            name='BailSpecificites',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('solidaires', models.BooleanField(default=False, help_text='Indique si les locataires sont solidaires pour le paiement du loyer')),
                ('date_debut', models.DateField()),
                ('date_fin', models.DateField(blank=True, null=True)),
                ('montant_loyer', models.DecimalField(decimal_places=2, max_digits=10)),
                ('type_charges', models.CharField(choices=[('forfaitaires', 'Forfaitaires'), ('provisionnelles', 'Provisionnelles')], default='forfaitaires', max_length=20, verbose_name='Type de charges')),
                ('montant_charges', models.DecimalField(decimal_places=2, max_digits=10)),
                ('jour_paiement', models.PositiveSmallIntegerField(default=5, help_text='Jour du mois')),
                ('depot_garantie', models.DecimalField(decimal_places=2, max_digits=10)),
                ('releve_eau_entree', models.CharField(blank=True, max_length=20)),
                ('releve_elec_entree', models.CharField(blank=True, max_length=20)),
                ('releve_gaz_entree', models.CharField(blank=True, max_length=20)),
                ('date_signature', models.DateField(default=django.utils.timezone.now)),
                ('date_etat_lieux_entree', models.DateField(blank=True, null=True)),
                ('observations', models.TextField(blank=True)),
                ('zone_tendue', models.BooleanField(default=False, help_text="Situé en zone d'encadrement des loyers")),
                ('rent_price_id', models.IntegerField(blank=True, help_text='ID du RentPrice de référence (base rent_control)', null=True)),
                ('justificatif_complement_loyer', models.TextField(blank=True, help_text="Justification du complément de loyer en cas de dépassement du plafond d'encadrement", verbose_name='Justification du complément de loyer')),
                ('pdf', models.FileField(blank=True, null=True, upload_to='bail_pdfs/', verbose_name='Bail PDF')),
                ('latest_pdf', models.FileField(blank=True, null=True, upload_to='bail_pdfs/', verbose_name='Dernière version signée')),
                ('grille_vetuste_pdf', models.FileField(blank=True, null=True, upload_to='bail_pdfs/', verbose_name='Grille de vétusté PDF')),
                ('notice_information_pdf', models.FileField(blank=True, null=True, upload_to='bail_pdfs/', verbose_name="Notice d'information PDF")),
                ('dpe_pdf', models.FileField(blank=True, null=True, upload_to='bail_pdfs/', verbose_name='Diagnostic de Performance Énergétique PDF')),
                ('is_draft', models.BooleanField(default=True, help_text='Indique si le bail est encore en mode brouillon', verbose_name='Brouillon')),
                ('bien', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bails', to='bail.bien')),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type_document', models.CharField(choices=[('bail', 'Contrat de bail'), ('grille_vetuste', 'Grille de vétusté'), ('notice_information', "Notice d'information"), ('diagnostic', 'Diagnostic'), ('autre', 'Autre document')], help_text='Type de document', max_length=50)),
                ('nom_original', models.CharField(help_text='Nom original du fichier uploadé', max_length=255)),
                ('file', models.FileField(help_text='Fichier du document', upload_to='documents/%Y/%m/')),
                ('date_creation', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_modification', models.DateTimeField(auto_now=True)),
                ('bail', models.ForeignKey(blank=True, help_text='Bail auquel ce document est rattaché', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='bail.bailspecificites')),
                ('bien', models.ForeignKey(blank=True, help_text='Bien auquel ce document est rattaché', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='bail.bien')),
                ('uploade_par', models.ForeignKey(blank=True, help_text='Utilisateur qui a uploadé ce document', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='documents_uploades', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
                'db_table': 'bail_document',
                'ordering': ['-date_creation'],
            },
        ),
        migrations.CreateModel(
            name='Locataire',
            fields=[
                ('personne_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='bail.personne')),
                ('lieu_naissance', models.CharField(blank=True, max_length=100)),
                ('adresse_actuelle', models.CharField(blank=True, help_text='Adresse actuelle du locataire avant emménagement', max_length=255)),
                ('profession', models.CharField(blank=True, max_length=100)),
                ('employeur', models.CharField(blank=True, max_length=100)),
                ('revenu_mensuel', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('num_carte_identite', models.CharField(blank=True, max_length=30)),
                ('date_emission_ci', models.DateField(blank=True, null=True)),
                ('caution_requise', models.BooleanField(default=False, help_text='Indique si une caution est requise pour ce locataire')),
            ],
            options={
                'verbose_name': 'Locataire',
                'verbose_name_plural': 'Locataires',
            },
            bases=('bail.personne',),
        ),
        migrations.AddField(
            model_name='bailleur',
            name='personne',
            field=models.ForeignKey(blank=True, help_text='Personne physique bailleur', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bailleurs', to='bail.personne'),
        ),
        migrations.AddField(
            model_name='bailleur',
            name='signataire',
            field=models.ForeignKey(blank=True, help_text='Personne physique qui signe pour le bailleur', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bailleurs_signes', to='bail.personne'),
        ),
        migrations.CreateModel(
            name='Mandataire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_carte_professionnelle', models.CharField(blank=True, max_length=50)),
                ('date_debut_mandat', models.DateField()),
                ('date_fin_mandat', models.DateField(blank=True, null=True)),
                ('signataire', models.ForeignKey(help_text='Personne physique qui signe pour le mandataire', on_delete=django.db.models.deletion.CASCADE, related_name='mandats_signes', to='bail.personne')),
                ('societe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mandats', to='bail.societe')),
            ],
            options={
                'verbose_name': 'Mandataire',
                'verbose_name_plural': 'Mandataires',
            },
        ),
        migrations.AddField(
            model_name='bailspecificites',
            name='mandataire',
            field=models.ForeignKey(blank=True, help_text='Mandataire qui gère ce bail', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='baux_geres', to='bail.mandataire'),
        ),
        migrations.AddField(
            model_name='bailleur',
            name='societe',
            field=models.ForeignKey(blank=True, help_text='Société bailleur', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bailleurs', to='bail.societe'),
        ),
        migrations.AddField(
            model_name='bailspecificites',
            name='locataires',
            field=models.ManyToManyField(related_name='bails', to='bail.locataire'),
        ),
        migrations.CreateModel(
            name='BailSignatureRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveSmallIntegerField(help_text='Ordre de signature dans le processus')),
                ('otp', models.CharField(max_length=6)),
                ('signed', models.BooleanField(default=False)),
                ('signed_at', models.DateTimeField(blank=True, null=True)),
                ('link_token', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('bail', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='signature_requests', to='bail.bailspecificites')),
                ('bailleur_signataire', models.ForeignKey(blank=True, help_text='Signataire du bailleur (personne physique ou représentant de société)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bailleur_signature_requests', to='bail.personne')),
                ('locataire', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='signature_requests', to='bail.locataire')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.AddConstraint(
            model_name='bailleur',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('personne__isnull', False), ('societe__isnull', True)), models.Q(('personne__isnull', True), ('societe__isnull', False)), _connector='OR'), name='bailleur_exactly_one_type'),
        ),
        migrations.AlterUniqueTogether(
            name='bailsignaturerequest',
            unique_together={('bail', 'bailleur_signataire'), ('bail', 'locataire')},
        ),
    ]
