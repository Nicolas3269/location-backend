# Generated by Django 5.1.7 on 2025-09-16 12:00

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('location', '0011_add_null_to_identifiant_fiscal'),
    ]

    operations = [
        migrations.CreateModel(
            name='EtatLieux',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('pdf', models.FileField(blank=True, null=True, upload_to='signed_documents/', verbose_name='Document PDF')),
                ('latest_pdf', models.FileField(blank=True, null=True, upload_to='signed_documents/', verbose_name='Dernière version signée')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type_etat_lieux', models.CharField(choices=[('entree', "État des lieux d'entrée"), ('sortie', 'État des lieux de sortie')], max_length=10)),
                ('status', models.CharField(choices=[('draft', 'Brouillon'), ('signing', 'En cours de signature'), ('signed', 'Signé et finalisé')], default='draft', max_length=20)),
                ('date_etat_lieux', models.DateField(default=django.utils.timezone.now)),
                ('nombre_cles', models.JSONField(default=dict)),
                ('compteurs', models.JSONField(default=dict)),
                ('grille_vetuste_pdf', models.FileField(blank=True, null=True, upload_to='etat_lieux_pdfs/', verbose_name='Grille de vétusté PDF')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='etats_lieux', to='location.location')),
            ],
            options={
                'verbose_name': 'État des lieux',
                'verbose_name_plural': 'États des lieux',
                'db_table': 'etat_lieux_etatlieux',
                'ordering': ['-created_at'],
                'unique_together': {('location', 'type_etat_lieux')},
            },
        ),
        migrations.CreateModel(
            name='EtatLieuxEquipement',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('equipment_type', models.CharField(choices=[('piece', 'Équipement de pièce'), ('chauffage', 'Chauffage'), ('annexe', 'Annexe')], help_text="Type d'équipement", max_length=20)),
                ('equipment_key', models.CharField(help_text="Identifiant de l'équipement (sol, murs, chaudiere, cave, etc.)", max_length=50)),
                ('equipment_name', models.CharField(help_text="Nom d'affichage de l'équipement (Sol, Murs, Chaudière, Cave, etc.)", max_length=100)),
                ('etat', models.CharField(blank=True, choices=[('TB', 'Très bon'), ('B', 'Bon'), ('P', 'Passable'), ('M', 'Mauvais'), ('', 'Non renseigné')], help_text="État de l'équipement", max_length=20)),
                ('comment', models.TextField(blank=True, help_text="Commentaire sur l'équipement")),
                ('data', models.JSONField(default=dict, help_text="Données additionnelles spécifiques au type d'équipement")),
                ('etat_lieux', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='equipements', to='etat_lieux.etatlieux')),
            ],
            options={
                'verbose_name': 'Équipement état des lieux',
                'verbose_name_plural': 'Équipements état des lieux',
                'db_table': 'etat_lieux_equipement',
            },
        ),
        migrations.CreateModel(
            name='EtatLieuxPhoto',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('photo_index', models.IntegerField(default=0, help_text='Index de la photo pour cet équipement')),
                ('image', models.ImageField(help_text="Photo de l'équipement", upload_to='etat_lieux_photos/')),
                ('nom_original', models.CharField(help_text='Nom original du fichier', max_length=255)),
                ('equipment', models.ForeignKey(help_text='Équipement associé', on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='etat_lieux.etatlieuxequipement')),
            ],
            options={
                'verbose_name': 'Photo état des lieux',
                'verbose_name_plural': 'Photos état des lieux',
                'db_table': 'etat_lieux_photo',
                'ordering': ['equipment', 'photo_index'],
            },
        ),
        migrations.CreateModel(
            name='EtatLieuxPiece',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nom', models.CharField(help_text='Nom de la pièce', max_length=100)),
                ('type_piece', models.CharField(help_text='Type de pièce', max_length=50)),
                ('etat_lieux', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pieces', to='etat_lieux.etatlieux')),
            ],
            options={
                'verbose_name': 'Pièce état des lieux',
                'verbose_name_plural': 'Pièces état des lieux',
                'db_table': 'etat_lieux_piece',
                'unique_together': {('etat_lieux', 'nom')},
            },
        ),
        migrations.AddField(
            model_name='etatlieuxequipement',
            name='piece',
            field=models.ForeignKey(blank=True, help_text='Pièce associée (si équipement de pièce)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='equipements', to='etat_lieux.etatlieuxpiece'),
        ),
        migrations.CreateModel(
            name='EtatLieuxSignatureRequest',
            fields=[
                ('order', models.PositiveSmallIntegerField(help_text='Ordre de signature dans le processus')),
                ('otp', models.CharField(blank=True, default='', max_length=6)),
                ('otp_generated_at', models.DateTimeField(blank=True, help_text="Horodatage de génération de l'OTP (pour vérifier l'expiration)", null=True)),
                ('link_token', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('signed', models.BooleanField(default=False)),
                ('signed_at', models.DateTimeField(blank=True, null=True)),
                ('signature_image', models.ImageField(blank=True, null=True, upload_to='signatures/')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(default=django.utils.timezone.now)),
                ('bailleur_signataire', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='etat_lieux_signatures_bailleur', to='location.personne')),
                ('etat_lieux', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='signature_requests', to='etat_lieux.etatlieux')),
                ('locataire', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='etat_lieux_signatures_locataire', to='location.locataire')),
            ],
            options={
                'verbose_name': 'Demande signature état des lieux',
                'verbose_name_plural': 'Demandes signature état des lieux',
                'ordering': ['order'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='etatlieuxequipement',
            unique_together={('etat_lieux', 'equipment_type', 'equipment_key', 'piece')},
        ),
    ]
